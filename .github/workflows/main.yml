name: CI/CD Pipeline

on:
  push:
    branches: [ main ]  # Adjust if needed

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: phase_3_imdb
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgpgme-dev libgpg-error-dev pkg-config
          # Debug: Confirm gpgme-config is installed
          which gpgme-config || true
          gpgme-config --version || true

      - name: Stub gpgme-config if not found
        run: |
          if ! command -v gpgme-config >/dev/null; then
            echo "Creating stub for gpgme-config..."
            sudo bash -c 'echo "#!/bin/bash" > /usr/local/bin/gpgme-config'
            sudo bash -c 'echo "if [ \"$1\" = \"--version\" ]; then" >> /usr/local/bin/gpgme-config'
            sudo bash -c 'echo "  echo \"1.18.0\"" >> /usr/local/bin/gpgme-config'
            sudo bash -c 'echo "elif [ \"$1\" = \"--cflags\" ]; then" >> /usr/local/bin/gpgme-config'
            sudo bash -c 'echo "  echo \"-I/usr/include/gpgme\"" >> /usr/local/bin/gpgme-config'
            sudo bash -c 'echo "elif [ \"$1\" = \"--libs\" ]; then" >> /usr/local/bin/gpgme-config'
            sudo bash -c 'echo "  echo \"-lgpgme\"" >> /usr/local/bin/gpgme-config'
            sudo bash -c 'echo "else" >> /usr/local/bin/gpgme-config'
            sudo bash -c 'echo "  echo \"\"" >> /usr/local/bin/gpgme-config'
            sudo bash -c 'echo "fi" >> /usr/local/bin/gpgme-config'
            sudo chmod +x /usr/local/bin/gpgme-config
          fi
          echo "Using gpgme-config at: $(which gpgme-config)"
          gpgme-config --version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          # Replace with your actual test command, e.g., pytest
          echo "Running tests..."

      - name: Deploy & restart Flask app
        uses: appleboy/ssh-action@v0.1.10
        with:
          host:        ${{ secrets.EC2_HOST }}
          username:    ${{ secrets.EC2_USER }}
          key:         ${{ secrets.EC2_SSH_KEY }}
          port:        22
          sync:        false
          timeout:     120s
          script_stop: false
          script: |
            set -eu
            set +x  # disable noisy trace output

            # Ensure required tools are installed
            sudo yum install -y tmux git || sudo apt-get install -y tmux git

            # Clone or pull repo
            REPO_ROOT=~/imdb-lorentz/phase_3_imdb
            if [ -d "$REPO_ROOT" ]; then
              cd "$REPO_ROOT" && git pull origin main
            else
              git clone https://github.com/${{ github.repository }}.git ~/imdb-lorentz
              cd "$REPO_ROOT"
            fi

            # Kill old Flask app if running in tmux
            tmux kill-session -t flask || true

            # Start Flask in a tmux session
            cd "$REPO_ROOT"
            tmux new-session -d -s flask "python3 app.py"

            # Done
            exit 0
